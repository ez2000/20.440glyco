coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(2)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
print("Took",count,"tosses to get heads")
print(took tosses to get heads)
print("took tosses to get heads"")
# 3.3) for loop
set.seed(1)
# toss 5 times and count how many heads you get
numToss <- 5
numHeads <- 0
for (nthToss in 1:numToss) {
cat("Toss: ",nthToss,"\n")
# 3.3) for loop
set.seed(1)
# toss 5 times and count how many heads you get
numToss <- 5
numHeads <- 0
for (nthToss in 1:numToss) {
cat("Toss: ",nthToss,"\n")
# toss coin
coinTossN <- rbinom(n = 1, prob = 0.5, size = 1)
cat("result:",coinTossN,"\n")
if (coinTossN == head) {
numHeads = numHeads + 1
}
}
cat("After",numToss,"tosses, we have",numHeads,"heads")
myString <- "test string"
save(myString,file="test.Rdata")
save.image("test2.Rdata")
saveRDS(myString, "myString.RDS")
rm(myString)
exists("myString")
load("test.Rdata")
exists("myString")
myStringNew <- readRDS("myString.RDS")
rm(myString)
exists("myString")
load("test.Rdata")
exists("myString")
myStringNew <- readRDS("myString.RDS")
exists("myStringNew")
# this removes all variables from the workspace!
rm(list=ls())
ls()
load("test2.Rdata")
ls()
write(myString,"test.txt")
write(myString,"test.txt")
```{r}
myNewString <- readLines("test.txt")
print(myNewString)
load("recitations.RData")
write.csv(df,"recitations.csv", row.names = FALSE)
write.csv(df,"recitations.csv", row.names = FALSE)
df2 <- read.csv("recitations.csv")
head(df2)
?load
install.packages('Seurat')
library(Seurat)
Read10X('/Users/erikazhang/Dropbox\ \(MIT\)/20.440\ Biological\ Networks/sugarseq\ data', )
Read10X('/Users/erikazhang/Dropbox\ \(MIT\)/20.440\ Biological\ Networks/sugarseq\ data')
Read10X('/Users/erikazhang/Dropbox\ \(MIT)/20.440\ Biological\ Networks/sugarseq\data')
pwd()
load('/Users/erikazhang/Dropbox\ \(MIT\)/20.440\ Biological\ Networks/sugarseq\ data'))
Read10X('/Users/erikazhang/Dropbox\\ \\(MIT\\)/20.440\\ Biological\\ Networks/sugarseq\\ data')
Read10X('/Users/erikazhang/Desktop/data')
Read10X('/Users/erikazhang/Desktop/data')
Read10X('/Users/erikazhang/Desktop/data')
source(SUGAR_seq Seurat Pset4.R)
source('SUGAR_seq Seurat Pset4.R')
# set the file path to raw data folder
path_to_raw <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/gitpset4/source"
# set the working directory to the file path
setwd(path_to_raw)
> source('SUGAR_seq Seurat Pset4.R')
> source('SUGAR_seq Seurat Pset4.R')
source('SUGAR_seq Seurat Pset4.R')
source("SUGAR_seq Seurat Pset4.R")
getwd()
source("SUGAR-seq Seurat Pset4")
source("SUGAR-seq Seurat Pset4.R")
# Make new column in gene expression matrix with percent mitochondrial, hemoglobin RNA
geneexp_seurat <- PercentageFeatureSet(geneexp_seurat, pattern = "^MT-", col.name = 'pct_mito')
geneexp_seurat <- PercentageFeatureSet(geneexp_seurat, "^HB[^(P)]", col.name = "pct_hb")
# Plot QC features
feats <- c("nFeature_RNA", "nCount_RNA", "pct_mito", "pct_hb")
# Filter out samples with QC characteristics. numbers taken from nbisweden.github.io doc
selected_cells <- WhichCells(geneexp_seurat, expression = nFeature_RNA > 200 & nFeature_RNA < 4000)
selected_feats <- rownames(geneexp_seurat)[Matrix::rowSums(geneexp_seurat) > 3]
# Select subset of data to filter out cells
geneexp_seurat.filt <- subset(geneexp_seurat, features = selected_feats,
cells = selected_cells)
geneexp_seurat.filt <- subset(geneexp_seurat, features = selected_feats,
cells = selected_mito)
# Select subset of data to filter out cells
geneexp_seurat.filt <- subset(geneexp_seurat, features = selected_feats,
cells = selected_cells)
library(scater)
#select cells with residual variance >1.3 from SCTransform
selected_cells <- sce$res.var > 1.3
#####################
# CLUSTER ANALAYSIS #
#####################
library(scater)
install(scater)
residual_variance <- geneexp_seurat.filt@assays$SCT@scale.data[, "residual.variance"]
selected_cells <- names(residual_variance[residual_variance > 1.3])
residual_variance <- geneexp_seurat.filt@assays$SCT@scale.data[, "residual.variance"]
assays(geneexp_seurat)
> assays(geneexp_seurat.filt)
assays(geneexp_seurat.filt)
#-----------------------------------------------------------------
# 1) Rerun PCA and data using parameters described by SUGAR-Seq paper
#-----------------------------------------------------------------
#SCTransform replaces Normalize, find variable features, and ScaleData
geneexp_seurat.filt <- SCTransform(geneexp_seurat.filt, vst.flavor = "v2", verbose = FALSE)
#####################
# CLUSTER ANALAYSIS #
#####################
install(glmGamPoi)
#####################
# CLUSTER ANALAYSIS #
#####################
install(glmGamPoi)
# set the working directory to the file path for
setwd(path_to_init)
# source
source("baseline source script")
# set the file path to folder containing baseline source script to load data and packages
path_to_init <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/source code"
#####################
# CLUSTER ANALAYSIS #
#####################
library(glmGamPoi)
install.packages("BiocManager")
install.packages("BiocManager")
BiocManager::install("glmGamPoi")
#####################
# CLUSTER ANALAYSIS #
#####################
library(glmGamPoi)
library(glmGamPoi) #for SCTransform, Bioconductor
#-----------------------------------------------------------------
# 1) Rerun PCA and data using parameters described by SUGAR-Seq paper
#-----------------------------------------------------------------
#SCTransform replaces Normalize, find variable features, and ScaleData
geneexp_seurat.filt <- SCTransform(geneexp_seurat.filt, vst.flavor = "v2", verbose = FALSE)
library(glmGamPoi)
library(glmGamPoi) #for SCTransform, Bioconductor
#-----------------------------------------------------------------
# 0) Set up
#-----------------------------------------------------------------
# set the file path to raw data folder
path_to_raw <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/gitpset4/raw data"
install.packages("glmGamPoi")
# set the file path to folder containing baseline source script to load data and packages
path_to_init <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/source code"
# set the working directory to the file path for
setwd(path_to_init)
# source
source("baseline source script")
# source
source("baseline source script")
# set the file path to folder containing baseline source script to load data and packages
path_to_init <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/source code"
# set the working directory to the file path for
setwd(path_to_init)
# source
source("baseline source script") #can't run while open
# source
source("baseline source script.R") #can't run while open
# source
source("baseline source script.R") #can't run while open
#-----------------------------------------------------------------
# 1) Rerun PCA and data using parameters described by SUGAR-Seq paper
#-----------------------------------------------------------------
#SCTransform replaces Normalize, find variable features, and ScaleData
geneexp_seurat.filt <- SCTransform(geneexp_seurat.filt, vst.flavor = "v2", verbose = FALSE)
version
#-----------------------------------------------------------------
# 1) Rerun PCA and data using parameters described by SUGAR-Seq paper
#-----------------------------------------------------------------
#SCTransform replaces Normalize, find variable features, and ScaleData
geneexp_seurat.filt <- SCTransform(geneexp_seurat.filt, verbose = FALSE)
#select cells with residual variance >1.3 from SCTransform
selected_cells <- sce$res.var > 1.3
residual_variance <- geneexp_seurat.filt@assays$SCT@scale.data[, "residual.variance"]
selected_cells <- names(residual_variance[residual_variance > 1.3])
geneexp_seurat.filt <- subset(geneexp_seurat.filt, cells = selected_cells)
assays(geneexp_seurat.filt)
library(scater)
#select cells with residual variance >1.3 from SCTransform
selected_cells <- sce$res.var > 1.3
#select cells with residual variance >1.3 from SCTransform
selected_cells <- geneexp_seurat.filt$res.var > 1.3
View(geneexp_seurat.filt)
View(geneexp_seurat.filt)
#select cells with residual variance >1.3 from SCTransform
residual_variance <- rowVars(GetASssayData(object = geneexp_seurat.filt, slot= "scale.data"))
selected_cells <- names(residual_variance[residual_variance > 1.3])
#select cells with residual variance >1.3 from SCTransform
residual_variance <- rowVars(GetAssayData(object = geneexp_seurat.filt, slot= "scale.data"))
# source
source("baseline source script.R") #can't run while open
#-----------------------------------------------------------------
# 0) Set up
#-----------------------------------------------------------------
# set the file path to folder containing baseline source script to load data and packages
path_to_init <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/source code"
# set the working directory to the file path for
setwd(path_to_init)
# source
source("baseline source script.R") #can't run while open
geneexp_seurat.filt <- subset(geneexp_seurat.filt, cells = selected_cells)
#select cells with residual variance >1.3 from SCTransform
residual_variance <- rowVars(GetAssayData(object = geneexp_seurat.filt, slot= "scale.data"))
selected_cells <- names(residual_variance[residual_variance > 1.3])
geneexp_seurat.filt <- subset(geneexp_seurat.filt, cells = selected_cells)
RunPCA(npcs = 50, verbose = FALSE)
RunPCA(geneexp_seurat.filt, verbose = FALSE)
RunUMAP(reduction = "pca", dims = 1:30, verbose = FALSE)
FindNeighbors(geneexp_seurat.filt, reduction = "pca", dims = 1:10,   k.param = 50, annoy.metric = 'cosine', verbose = FALSE)
RunPCA(geneexp_seurat.filt, verbose = FALSE)
FindNeighbors(geneexp_seurat.filt, reduction = "pca", dims = 1:10,   k.param = 50, annoy.metric = 'cosine', verbose = FALSE)
FindNeighbors(geneexp_seurat.filt, reduction = 'pca', dims = 1:10,   k.param = 50, annoy.metric = 'cosine', verbose = FALSE)
FindNeighbors(geneexp_seurat.filt, dims = 1:10,   k.param = 50, annoy.metric = 'cosine', verbose = FALSE)
FindClusters(resolution)
geneexp_seurat.filt <-RunPCA(geneexp_seurat.filt, verbose = FALSE)
geneexp_seurat.filt <- FindNeighbors(geneexp_seurat.filt, dims = 1:10,   k.param = 50, annoy.metric = 'cosine', verbose = FALSE)
View(geneexp_seurat)
View(geneexp_seurat)
View(geneexp_seurat.filt)
View(geneexp_seurat.filt)
geneexp_seurat.filt <-FindClusters(geneexp_seurat.filt, resolution=0.6)
geneexp_seurat.filt <-RunUMAP(geneexp_seurat.filt, dims = 1:10, n.neighbors = 50, metric = "cosine" verbose = FALSE)
geneexp_seurat.filt <-RunUMAP(geneexp_seurat.filt, dims = 1:10, n.neighbors = 50, metric = "cosine", verbose = FALSE)
DimPlot(geneexp_seurat.filt)
#-----------------------------------------------------------------
# 1) Rerun PCA and data using parameters described by SUGAR-Seq paper
#-----------------------------------------------------------------
#SCTransform replaces Normalize, find variable features, and ScaleData
geneexp_seurat.filt <- geneexp_seurat
geneexp_seurat.filt <- SCTransform(geneexp_seurat.filt, verbose = FALSE)
#select cells with residual variance >1.3 from SCTransform
residual_variance <- rowVars(GetAssayData(object = geneexp_seurat.filt, slot= "scale.data"))
selected_cells <- names(residual_variance[residual_variance > 1.3])
geneexp_seurat.filt <- subset(geneexp_seurat.filt, cells = selected_cells)
geneexp_seurat.filt <-RunPCA(geneexp_seurat.filt, verbose = FALSE)
geneexp_seurat.filt <- FindNeighbors(geneexp_seurat.filt, dims = 1:10,   k.param = 50, annoy.metric = 'cosine', verbose = FALSE)
geneexp_seurat.filt <-FindClusters(geneexp_seurat.filt, resolution=0.6)
geneexp_seurat.filt <-RunUMAP(geneexp_seurat.filt, dims = 1:10, n.neighbors = 50, metric = "cosine", verbose = FALSE)
DimPlot(geneexp_seurat.filt)
DefaultAssay()
DefaultAssay(geneexp_seurat.filt)
DefaultAssay(geneexp_seurat)
Dim(adt_assay)
dim(adt_assay)
# Make Seurat object with info from the three matrices with assays: "RNA", "ADT", "CUSTOM"
seq_seurat <- CreateSeuratObject(counts = sugarseq.data$`Gene Expression`) #default assay is RNA
Assays(seq_seurat)
adt_assay <- CreateAssayObject(seq_seurat,  counts = sugarseq.data$`Antibody Capture`)
adt_assay <- CreateAssayObject(seq_seurat,  data = sugarseq.data$`Antibody Capture`)
adt_assay <- CreateAssayObject(counts = sugarseq.data$`Antibody Capture`)
custom_assay <- CreateAssayObject(counts = sugarseq.data$`Custom`)
dim(adt_assay)
custom_assay <- CreateAssayObject(counts = sugarseq.data$`Custom`)
seq_seurat[['custom']] <- custom_assay
DefaultAssay(object, ADT)
dim(custom_assay)
DefaultAssay(custom_assay) <- 'RNA'
View(seq_seurat)
View(seq_seurat)
DefaultAssay(seq_seurat) <- 'RNA'
seq_seurat <- NormalizeData(seq_seurat)
seq_seurat <- NormalizeData(seq_seurat, assay = 'ADT', normaliation.method = 'CLR')
#-----------------------------------------------------------------
# 1) Make feature plots using biotin tag for Antibody Capture using guided cluster tutorial
#-----------------------------------------------------------------
DefaultAssay(seq_seurat) <- 'ADT'
adt_assay <- CreateAssayObject(counts = sugarseq.data$`Antibody Capture`)
seq_seurat[['ADT']] <- adt_assay
dim(adt_assay)
#-----------------------------------------------------------------
# 1) Make feature plots using biotin tag for Antibody Capture using guided cluster tutorial
#-----------------------------------------------------------------
DefaultAssay(seq_seurat) <- 'ADT'
seq_seurat <- NormalizeData(seq_seurat, assay = 'ADT', normaliation.method = 'CLR')
FeaturePlot(object= seq_seurat, features = "Biotin")
FeaturePlot(object= seq_seurat, features = "Biotin")
FeaturePlot(object= seq_seurat,dims = c(1, 2), features = "Biotin")
install.packages("installr")
library(installr)
updateR()
#-----------------------------------------------------------------
# 1) Rerun PCA and data using parameters described by SUGAR-Seq paper
#-----------------------------------------------------------------
# Set default assay to RNA to work with gene expression
DefaultAssay(seq_seurat, 'RNA')
#-----------------------------------------------------------------
# 1) Rerun PCA and data using parameters described by SUGAR-Seq paper
#-----------------------------------------------------------------
# Set default assay to RNA to work with gene expression
DefaultAssay(seq_seurat) <- 'RNA'
#-----------------------------------------------------------------
# 1) Make feature plots using biotin tag for Antibody Capture using guided cluster tutorial
#-----------------------------------------------------------------
DefaultAssay(seq_seurat) <- 'ADT'
seq_seurat <- NormalizeData(seq_seurat, assay = 'ADT', normaliation.method = 'CLR')
seq_seurat <- NormalizeData(seq_seurat, assay = 'ADT', normalization.method = 'CLR')
RidgePlot(object= seq_seurat, features = "Biotin")
#-----------------------------------------------------------------
# 2) Custom assay
#-----------------------------------------------------------------
DefaultAssay(seq_seurat) <- 'custom'
FeaturePlot(object= seq_seurat, features = "Biotin")
seq_seurat <- NormalizeData(seq_seurat, assay = 'ADT', normalization.method = "CLR")
FeaturePlot(object= seq_seurat, features = "Biotin")
RidgePlot(object= seq_seurat, features = "Biotin")
dim(seq_seurat)
#-----------------------------------------------------------------
# 1) Make feature plots using biotin tag for Antibody Capture using guided cluster tutorial
#-----------------------------------------------------------------
DefaultAssay(seq_seurat) <- 'ADT'
dim(seq_seurat)
seq_seurat <- NormalizeData(seq_seurat, assay = 'ADT', normalization.method = "CLR")
FeaturePlot(object= seq_seurat, features = "Biotin")
seq_seurat <- NormalizeData(seq_seurat, assay = 'ADT', normalization.method = "CLR")
FeaturePlot(object= seq_seurat, features = "Biotin")
FeaturePlot(object= seq_seurat, reduction = 'umap', features = "Biotin")
#-------------------------------------------------------------------
# 1) Make feature plots using biotin tag for lectin tagged to glycan
#-------------------------------------------------------------------
DefaultAssay(seq_seurat) <- 'ADT'
seq_seurat <- RunUMAP(seq_seurat)
seq_seurat <- RunUMAP(seq_seurat, features = 'Biotin')
seq_seurat <-RunUMAP(seq_seurat, dims = 1:10, n.neighbors = 50, metric = "cosine", verbose = FALSE)
seq_seurat <- FindAllMarkers(seq_seurat)
#-----------------------------------------------------------------
# 1) Rerun PCA and data using parameters described by SUGAR-Seq paper
#-----------------------------------------------------------------
# Set default assay to RNA to work with gene expression
DefaultAssay(seq_seurat) <- 'RNA'
#SCTransform replaces Normalize, find variable features, and ScaleData
seq_seurat <- SCTransform(seq_seurat, verbose = FALSE)
#select cells with residual variance >1.3 from SCTransform
residual_variance <- rowVars(GetAssayData(object = seq_seurat, slot= "scale.data"))
selected_cells <- names(residual_variance[residual_variance > 1.3])
seq_seurat <- subset(seq_seurat, cells = selected_cells)
seq_seurat <-RunPCA(seq_seurat, verbose = FALSE)
seq_seurat <- FindNeighbors(seq_seurat, dims = 1:10,   k.param = 50, annoy.metric = 'cosine', verbose = FALSE)
#select cells with residual variance >1.3 from SCTransform
residual_variance <- rowVars(GetAssayData(object = seq_seurat, slot= "scale.data"))
# set the file path to folder containing baseline source script to load data and packages
path_to_init <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/source code"
# set the working directory to the file path for
setwd(path_to_init)
# source
source("baseline source script.R") #can't run while open
#-----------------------------------------------------------------
# 1) Rerun PCA and data using parameters described by SUGAR-Seq paper
#-----------------------------------------------------------------
# Set default assay to RNA to work with gene expression
DefaultAssay(seq_seurat) <- 'RNA'
#SCTransform replaces Normalize, find variable features, and ScaleData
seq_seurat <- SCTransform(seq_seurat, verbose = FALSE)
#select cells with residual variance >1.3 from SCTransform
residual_variance <- rowVars(GetAssayData(object = seq_seurat, slot= "scale.data"))
#select cells with residual variance >1.3 from SCTransform
DefaultAssay(seq_seurat) <- 'SCT'
#-----------------------------------------------------------------
# 1) Load data and create Seurat objects
#-----------------------------------------------------------------
# Use Read10X() to extract data
sugarseq.data <- Read10X(path_to_raw, strip.suffix = TRUE)
# Make Seurat object with info from the three matrices with assays: "RNA", "ADT", "CUSTOM"
seq_seurat <- CreateSeuratObject(counts = sugarseq.data$`Gene Expression`) #default assay is RNA
Assays(seq_seurat)
adt_assay <- CreateAssayObject(counts = sugarseq.data$`Antibody Capture`)
seq_seurat[['ADT']] <- adt_assay
dim(adt_assay)
custom_assay <- CreateAssayObject(counts = sugarseq.data$`Custom`)
seq_seurat[['custom']] <- custom_assay
dim(custom_assay)
#-------------------------------------------------------------------
# 1) Make feature plots using biotin tag for lectin tagged to glycan
#-------------------------------------------------------------------
DefaultAssay(seq_seurat) <- 'ADT'
dim(seq_seurat)
seq_seurat <- NormalizeData(seq_seurat, assay = 'ADT', normalization.method = "CLR")
FeaturePlot(object= seq_seurat, reduction = 'umap', features = "Biotin")
FeaturePlot(object= seq_seurat, features = "Biotin")
<- 'RNA'
#-----------------------------------------------------------------
# 1) Rerun PCA and data using parameters described by SUGAR-Seq paper
#-----------------------------------------------------------------
# Set default assay to RNA to work with gene expression
DefaultAssay(seq_seurat) <- 'RNA'
#SCTransform replaces Normalize, find variable features, and ScaleData
seq_seurat <- SCTransform(seq_seurat, verbose = FALSE)
#select cells with residual variance >1.3 from SCTransform
DefaultAssay(seq_seurat) <- 'SCT'
residual_variance <- rowVars(GetAssayData(object = seq_seurat, slot= "scale.data"))
selected_cells <- names(residual_variance[residual_variance > 1.3])
seq_seurat <- subset(seq_seurat, cells = selected_cells)
seq_seurat <-RunPCA(seq_seurat, verbose = FALSE)
seq_seurat <- FindNeighbors(seq_seurat, dims = 1:10,   k.param = 50, annoy.metric = 'cosine', verbose = FALSE)
seq_seurat <-FindClusters(seq_seurat, resolution=0.6)
seq_seurat <-RunUMAP(seq_seurat, dims = 1:10, n.neighbors = 50, metric = "cosine", verbose = FALSE)
DimPlot(seq_seurat)
#######
# test to see if filtering makes a difference!
selected_cells <- WhichCells(seq_seurat, expression = nFeature_RNA > 200 & nFeature_RNA < 4000)
selected_feats <- rownames(seq_seurat)[Matrix::rowSums(seq_seurat) > 3]
# Select subset of data to filter out cells
seq_seurat <- subset(seq_seurat, features = selected_feats,
cells = selected_cells)
geneexp_seruat
# to undo filtering, rerun baseline source script
#SCTransform replaces Normalize, find variable features, and ScaleData
seq_seurat <- SCTransform(seq_seurat, verbose = FALSE)
#select cells with residual variance >1.3 from SCTransform
DefaultAssay(seq_seurat) <- 'SCT'
residual_variance <- rowVars(GetAssayData(object = seq_seurat, slot= "scale.data"))
selected_cells <- names(residual_variance[residual_variance > 1.3])
seq_seurat <- subset(seq_seurat, cells = selected_cells)
seq_seurat <-RunPCA(seq_seurat, verbose = FALSE)
seq_seurat <- FindNeighbors(seq_seurat, dims = 1:10,   k.param = 50, annoy.metric = 'cosine', verbose = FALSE)
seq_seurat <-FindClusters(seq_seurat, resolution=0.6)
seq_seurat <-RunUMAP(seq_seurat, dims = 1:10, n.neighbors = 50, metric = "cosine", verbose = FALSE)
DimPlot(seq_seurat)
seq_seurat <- FindAllMarkers(seq_seurat)
head(seq_seurat)
#-----------------------------------------------------------------
# 1) Initialize data and create Seurat objects
#-----------------------------------------------------------------
# Use Read10X() to extract data
sugarseq.data <- Read10X(path_to_raw)
# Make Seurat object with info from the three matrices with assays: "RNA", "ADT", "CUSTOM"
seq_seurat <- CreateSeuratObject(counts = sugarseq.data[['Gene Expression']], project = 'seq_seurat', min.cells = 0) #default assay is RNA
Assays(seq_seurat)
seq_seurat[['ADT']] <- CreateAssayObject(counts = sugarseq.data[['Antibody Capture']])
seq_seurat[['HTO']] <- CreateAssayObject(counts = sugarseq.data[['Custom']])
# Plot results
HTOHeatmap(seq_seurat, assay = "HTO", ncells = 5000)
# Normalize HTO data
seq_seurat <- NormalizeData(seq_seurat, assay = "HTO", normalization.method = "CLR", margin = 1)
# Demultiplex by hashtags
seq_seurat <- HTODemux(seq_seurat, assay = "HTO", kfunc = cluster_func, positive.quantile = positive.quantile, verbose = TRUE)
# HTODemux function parameters
cluster_func <- "clara"
positive.quantile <- 0.8
# Demultiplex by hashtags
seq_seurat <- HTODemux(seq_seurat, assay = "HTO", kfunc = cluster_func, positive.quantile = positive.quantile, verbose = TRUE)
# set the file path to folder containing baseline source script to load data and packages
path_to_init <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/source code"
# set the working directory to the file path for
setwd(path_to_init)
# source
source("baseline source script.R") #can't run while open
BiocManager::install("DropletUtils")
yes
BiocManager::install("DropletUtils")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DropletUtils")
# source
source("baseline source script.R") #can't run while open
##from Bojar lab github
## Packages and parameters
library(dplyr)
library(Seurat)
library(patchwork)
library(sctransform)
library(DropletUtils)
library(Matrix)
library(glmGamPoi)
library(ProjecTILs)
library(Cairo)
library(RColorBrewer)
library(scater)
install.packages("remotes")
library(remotes)
R.version
##RUN
install.packages("Cairo")
install.packages("remotes")
library(remotes)
remotes::install_github("carmonalab/scGate")
