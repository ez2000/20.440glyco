print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
3.2 While loops
set.seed(1)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(1)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(1)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(1)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(1)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(1)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(1)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(1)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
set.seed(1)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
set.seed(1)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
set.seed(1)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
set.seed(1)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
set.seed(1)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
set.seed(1)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
set.seed(1)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
set.seed(2)
set.seed(16675)
set.seed(16675)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(16675)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(16675)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
```
rm(myString)
exists("myString")
rm(myString)
exists("myString")
load("test.Rdata")
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(2)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
print("Took",count,"tosses to get heads")
print(took tosses to get heads)
print("took tosses to get heads"")
# 3.3) for loop
set.seed(1)
# toss 5 times and count how many heads you get
numToss <- 5
numHeads <- 0
for (nthToss in 1:numToss) {
cat("Toss: ",nthToss,"\n")
# 3.3) for loop
set.seed(1)
# toss 5 times and count how many heads you get
numToss <- 5
numHeads <- 0
for (nthToss in 1:numToss) {
cat("Toss: ",nthToss,"\n")
# toss coin
coinTossN <- rbinom(n = 1, prob = 0.5, size = 1)
cat("result:",coinTossN,"\n")
if (coinTossN == head) {
numHeads = numHeads + 1
}
}
cat("After",numToss,"tosses, we have",numHeads,"heads")
myString <- "test string"
save(myString,file="test.Rdata")
save.image("test2.Rdata")
saveRDS(myString, "myString.RDS")
rm(myString)
exists("myString")
load("test.Rdata")
exists("myString")
myStringNew <- readRDS("myString.RDS")
rm(myString)
exists("myString")
load("test.Rdata")
exists("myString")
myStringNew <- readRDS("myString.RDS")
exists("myStringNew")
# this removes all variables from the workspace!
rm(list=ls())
ls()
load("test2.Rdata")
ls()
write(myString,"test.txt")
write(myString,"test.txt")
```{r}
myNewString <- readLines("test.txt")
print(myNewString)
load("recitations.RData")
write.csv(df,"recitations.csv", row.names = FALSE)
write.csv(df,"recitations.csv", row.names = FALSE)
df2 <- read.csv("recitations.csv")
head(df2)
?load
install.packages('Seurat')
library(Seurat)
Read10X('/Users/erikazhang/Dropbox\ \(MIT\)/20.440\ Biological\ Networks/sugarseq\ data', )
Read10X('/Users/erikazhang/Dropbox\ \(MIT\)/20.440\ Biological\ Networks/sugarseq\ data')
Read10X('/Users/erikazhang/Dropbox\ \(MIT)/20.440\ Biological\ Networks/sugarseq\data')
pwd()
load('/Users/erikazhang/Dropbox\ \(MIT\)/20.440\ Biological\ Networks/sugarseq\ data'))
Read10X('/Users/erikazhang/Dropbox\\ \\(MIT\\)/20.440\\ Biological\\ Networks/sugarseq\\ data')
Read10X('/Users/erikazhang/Desktop/data')
Read10X('/Users/erikazhang/Desktop/data')
Read10X('/Users/erikazhang/Desktop/data')
# Run set up script to install key packages and set working directory
path_to_package <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/source code/setup script.R"
source(path_to_package)
path_to_raw <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/raw data/LN data"
# set the working directory to the output
path_to_output <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/LN output/"
setwd(path_to_output)
# list files in the directory to check if the file is present
list.files()
### SET PARAMETERS ###
wfile <- TRUE
# The number of decimal places to save in the final .csv table (may help reduce file size)
n.decimal <- 3 # n.decimal <- FALSE, if rounding up is not desired
# Name of the column containing the lectin data
lectin.col.name <- "Biotin"
# Lectin name, for output
lectin.name <- "PHA-L"
#sample set name
sample.set.name <- "LN"
#-----------------------------------------------------------------
# 1) Initialize data and create Seurat objects
#-----------------------------------------------------------------
# Use Read10X() to extract data
LNss_seurat.data <- Read10X(path_to_raw)
# Make Seurat object with info from the three matrices with assays: "RNA", "ADT", "CUSTOM"
LNss_seurat <- CreateSeuratObject(counts = LNss_seurat.data[['Gene Expression']], project = 'sugarseq_seurat', min.cells = 0) #default assay is RNA
LNss_seurat <- SCTransform(LNss_seurat, assay = 'RNA', new.assay.name = 'SCT',
variable.features.n = NULL, variable.features.rv.th = 1.3,
method = "glmGamPoi", verbose = TRUE)
#save csv of normalized data for
LN_SCT <- GetAssayData(object = LNss_seurat, assay = "SCT", slot = "data")
write.csv(LN_SCT, "LN SCT matrix.csv")
