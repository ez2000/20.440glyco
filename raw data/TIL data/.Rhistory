# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
set.seed(1)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
set.seed(1)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
set.seed(1)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
set.seed(1)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
set.seed(2)
set.seed(16675)
set.seed(16675)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(16675)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(16675)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
```
rm(myString)
exists("myString")
rm(myString)
exists("myString")
load("test.Rdata")
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(543)
# define head and tails
head <- 1
tail <- 0
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
if (coinToss == head) {
print("heads!")
} else if (coinToss == tail) {
print("tails!")
} else {
# error!
print("error: value not 1 or 0")
}
set.seed(2)
# toss the coin until you get a tails
count <- 0
coinToss <- tail
while (coinToss == tail) {
# toss the coin again
coinToss <- rbinom(n = 1, prob = 0.5, size = 1)
# increment the count by one
count <- count + 1
# if we somehow don't get a heads after 10 tosses, force exit from loop
if (count == 10) {
break
}
}
# cat() concatenates objects and prints
cat("Took",count,"tosses to get heads")
print("Took",count,"tosses to get heads")
print(took tosses to get heads)
print("took tosses to get heads"")
# 3.3) for loop
set.seed(1)
# toss 5 times and count how many heads you get
numToss <- 5
numHeads <- 0
for (nthToss in 1:numToss) {
cat("Toss: ",nthToss,"\n")
# 3.3) for loop
set.seed(1)
# toss 5 times and count how many heads you get
numToss <- 5
numHeads <- 0
for (nthToss in 1:numToss) {
cat("Toss: ",nthToss,"\n")
# toss coin
coinTossN <- rbinom(n = 1, prob = 0.5, size = 1)
cat("result:",coinTossN,"\n")
if (coinTossN == head) {
numHeads = numHeads + 1
}
}
cat("After",numToss,"tosses, we have",numHeads,"heads")
myString <- "test string"
save(myString,file="test.Rdata")
save.image("test2.Rdata")
saveRDS(myString, "myString.RDS")
rm(myString)
exists("myString")
load("test.Rdata")
exists("myString")
myStringNew <- readRDS("myString.RDS")
rm(myString)
exists("myString")
load("test.Rdata")
exists("myString")
myStringNew <- readRDS("myString.RDS")
exists("myStringNew")
# this removes all variables from the workspace!
rm(list=ls())
ls()
load("test2.Rdata")
ls()
write(myString,"test.txt")
write(myString,"test.txt")
```{r}
myNewString <- readLines("test.txt")
print(myNewString)
load("recitations.RData")
write.csv(df,"recitations.csv", row.names = FALSE)
write.csv(df,"recitations.csv", row.names = FALSE)
df2 <- read.csv("recitations.csv")
head(df2)
?load
install.packages('Seurat')
library(Seurat)
Read10X('/Users/erikazhang/Dropbox\ \(MIT\)/20.440\ Biological\ Networks/sugarseq\ data', )
Read10X('/Users/erikazhang/Dropbox\ \(MIT\)/20.440\ Biological\ Networks/sugarseq\ data')
Read10X('/Users/erikazhang/Dropbox\ \(MIT)/20.440\ Biological\ Networks/sugarseq\data')
pwd()
load('/Users/erikazhang/Dropbox\ \(MIT\)/20.440\ Biological\ Networks/sugarseq\ data'))
Read10X('/Users/erikazhang/Dropbox\\ \\(MIT\\)/20.440\\ Biological\\ Networks/sugarseq\\ data')
Read10X('/Users/erikazhang/Desktop/data')
Read10X('/Users/erikazhang/Desktop/data')
Read10X('/Users/erikazhang/Desktop/data')
### Install and load packages quietly (console doesn't get messy)
library(remotes)
library(fields)
##from Bojar lab github
## Packages and parameters
library(dplyr)
library(Seurat)
library(patchwork)
library(sctransform)
library(DropletUtils)
library(Matrix)
library(glmGamPoi)
library(ProjecTILs)
library(Cairo)
path_to_raw <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/gitpset4/raw data"
# set the working directory to the file path
setwd(path_to_raw)
# list files in the directory to check if the file is present
list.files()
# Create a dataframe for data summary
ss_seurat.data.summary <- as.data.frame(matrix(nrow = 1, ncol = 1))
#-----------------------------------------------------------------
# 1) Initialize data and create Seurat objects
#-----------------------------------------------------------------
# Use Read10X() to extract data
ss.data <- Read10X(path_to_raw)
# Make Seurat object with info from the three matrices with assays: "RNA", "ADT", "CUSTOM"
ss_seurat <- CreateSeuratObject(counts = ss.data[['Gene Expression']], project = 'sugarseq_seurat', min.cells = 0) #default assay is RNA
ss_seurat[['ADT']] <- CreateAssayObject(counts = ss.data[['Antibody Capture']])
ss_seurat[['HTO']] <- CreateAssayObject(counts = ss.data[['Custom']])
DefaultAssay(ss_seurat) <- 'RNA'
var_genes <- VariableFeatures(ss_seurat)
ss_seurat <- SCTransform(sugarseq_seurat, assay = 'RNA', new.assay.name = 'SCT',
variable.features.n = NULL, variable.features.rv.th = 1.3,
method = "glmGamPoi", verbose = TRUE)
ss_seurat <- SCTransform(ss_seurat, assay = 'RNA', new.assay.name = 'SCT',
variable.features.n = NULL, variable.features.rv.th = 1.3,
method = "glmGamPoi", verbose = TRUE)
ss_seurat <-RunPCA(ss_seurat, verbose = FALSE)
ss_seurat <- FindNeighbors(ss_seurat, dims = 1:10,   k.param = 50, annoy.metric = 'cosine', verbose = FALSE)
ss_seurat <-FindClusters(ss_seurat, resolution=0.6)
ss_seurat <-RunUMAP(ss_seurat, dims = 1:10, n.neighbors = 50, metric = "cosine", verbose = FALSE)
DimPlot(ss_seurat)
# Load reference map
ref.map <- load.reference.map()
# Run projection
query.projected <- make.projection(ss_seurat, ref=ref.map, query.assay = "RNA")
# Load reference map
ref.map <- load.reference.map()
path_to_raw <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/data"
# Run projection
query.projected <- make.projection(ss_seurat, ref=ref.map, query.assay = "RNA")
# Load reference map
ref.map <- load.reference.map()
# set the working directory to the file path
setwd(path_to_raw)
# Load reference map
ref.map <- load.reference.map()
# Load reference map
ref.map <- load.reference.map()
# Run projection
query.projected <- make.projection(ss_seurat, ref=ref.map, query.assay = "RNA")
plot.projection(ref.map, query.projected)
# Load reference map
ref.map <- readRDS("/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/data/ref_TILAtlas_mouse_v1.rds")
# Load reference map
ref.map <- readRDS("/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/data/ref_TILAtlas_mouse_v1.rds")
# Run projection
query.projected <- make.projection(ss_seurat, ref=ref.map, query.assay = "RNA")
plot.projection(ref.map, query.projected)
wfile <- FALSE
# The number of decimal places to save in the final .csv table (may help reduce file size)
# n.decimal <- FALSE, if rounding up is not desired
n.decimal <- 3
# Name of the column containing the lectin data
lectin.col.name <- "Biotin"
# Lectin name, for output
lectin.name <- "PHA-L"
# Create a dataframe for data summary
sc.data.summary <- as.data.frame(matrix(nrow = 1, ncol = 1))
ss_seurat.data.summary[["Number of variable genes"]] <- length(var_genes)
ss_seurat <- NormalizeData(ss_seurat, assay = 'ADT', normalization.method = "CLR", margin = 1)
final.matrix.rna <- as.data.frame(t(as.data.frame(GetAssayData(ss_seurat),
assay = "SCT", slot = "data")[var_genes,]))
final.matrix.adt <- as.data.frame(t(ss_seurat@assays$ADT@data))
final.matrix.rna[lectin.name] <- as.data.frame(final.matrix.adt[lectin.col.name][[1]])
if (n.decimal != 0){
final.matrix.rna <- round(final.matrix.rna, digits = n.decimal)}
# Classify cells
query.projected <- cellstate.predict(ref=ref.map, query=query.projected)
plot.statepred.composition(ref.map, query.projected, metric = "Percent")
# Export cell states
fun.cluster <- data.frame(names(Idents(query.projected)))
colnames(fun.cluster) <- c("Cell")
fun.cluster["Functional Cluster"] <- query.projected@meta.data[["functional.cluster"]]
fun.cluster[[lectin.name]] <- as.data.frame(t(query.projected@assays$ADT@data))[[lectin.col.name]]
filter.1 <- rownames(final.matrix.rna)%in%(fun.cluster$Cell)
sum(as.integer(filter.1))
final.matrix.rna <- final.matrix.rna[filter.1, ]
final.matrix.adt <- final.matrix.adt[filter.1, ]
final.matrix.adt["Type"] <- fun.cluster$`Functional Cluster`
final.matrix.adt <- final.matrix.adt[, c(3,4)]
colnames(final.matrix.adt)[1] <- lectin.name
sc.data.summary[["Number of non-T cells"]] <- sum(as.integer(!filter.1))
sc.data.summary[["Final number of cells"]] <- sum(as.integer(filter.1))
if (wfile){
write.table(final.matrix.rna,
file = paste0(datadir, sample.set.name, '_transformed_data.csv'),
sep = ',', row.names = T, col.names = NA, quote = F)
write.table(final.matrix.adt,
file = paste0(datadir, sample.set.name, '_transformed_identity.csv'),
sep = ',', row.names = T, col.names = NA, quote = F)
write.table(sc.data.summary, file = paste0(datadir, sample.set.name, '_data_summary.csv'),
sep = ',', row.names = F, col.names = T, quote = F)
}
## # Replace cell Idents
new.ident <- query.projected@meta.data[["functional.cluster"]]
names(new.ident) <- names(Idents(query.projected))
Idents(query.projected) <- new.ident
View(query.projected)
View(query.projected)
plot.projection(ref.map, query.projected)
plot.statepred.composition(ref.map, query.projected, metric = "Percent")
plot.projection(ref.map, query.projected)
path_to_raw <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/LN data"
path_to_raw <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/TIL data"
# set the working directory to the file path
setwd(path_to_raw)
# list files in the directory to check if the file is present
list.files()
# Create a dataframe for data summary
ss_seurat.data.summary <- as.data.frame(matrix(nrow = 1, ncol = 1))
#-----------------------------------------------------------------
# 1) Initialize data and create Seurat objects
#-----------------------------------------------------------------
# Use Read10X() to extract data
ss.data <- Read10X(path_to_raw)
# Make Seurat object with info from the three matrices with assays: "RNA", "ADT", "CUSTOM"
ss_seurat <- CreateSeuratObject(counts = ss.data[['Gene Expression']], project = 'sugarseq_seurat', min.cells = 0) #default assay is RNA
ss_seurat[['ADT']] <- CreateAssayObject(counts = ss.data[['Antibody Capture']])
ss_seurat[['HTO']] <- CreateAssayObject(counts = ss.data[['Custom']])
##from Bojar lab github
## Packages and parameters
library(dplyr)
# Run set up script to install key packages and set working directory
path_to_package <- "/Users/erikazhang/Dropbox (MIT)/20.440 Biological Networks/project/source code/setup script.R"
source(path_to_package)
library(Seurat)
library(Cairo)
install(Cairo)
version()
Version()
version
install.packages("installr")
library(installr)
updateR()
#########################
### PACKAGE SCRIPT ###
#########################
#-----------------------------------------------------------------
# 1) Install packages
#-----------------------------------------------------------------
### Install and load packages quietly (console doesn't get messy)
library(remotes)
library(fields)
##from Bojar lab github
library(dplyr)
library(Seurat)
library(patchwork)
library(sctransform)
library(DropletUtils)
library(Matrix)
library(glmGamPoi)
library(ProjecTILs)
library(Cairo)
updateR()
install.packages()
### Install and load packages quietly (console doesn't get messy)
library(remotes)
library(fields)
##from Bojar lab github
library(dplyr)
library(Seurat)
library(patchwork)
library(sctransform)
library(DropletUtils)
library(Matrix)
library(glmGamPoi)
library(ProjecTILs)
library(Cairo)
install.packages("Cairo", reinstall = TRUE)
install.packages("Cairo", dependencies  = TRUE)
library(Cairo)
